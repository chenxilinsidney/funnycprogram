(define (map proc items)
   (if (null? items)
       (list)
       (cons (proc (car items))
             (map proc (cdr items)))))

(define (square-list items)
  (map (lambda (x) (* x x)) items))

(define list-1 (list 1 2 3 4))
(newline)
(display list-1)
(newline)
(display (square-list list-1))
(newline)
(define nil (list))
(define nil-2 '())
(newline)
(newline)

(define (for-each proc items)
  (cond ((not (null? items))
         (proc (car items))
        (for-each proc (cdr items)))))

(for-each (lambda (x) (newline) (display x)) list-1)

(newline)
(display (cons (list 1 2) (list 3 4)))
(newline)
(display (list 1 (list 2 (list 3 4))))
(newline)
(define list-t1 (list 1 3 (list 5 7) 9))
(display list-t1)
(newline)
(display (car (cdr (car (cdr (cdr list-t1))))))
(display (cdaddr list-t1))
(newline)
(define list-t2 (list (list 7)))
(display list-t2)
(newline)
(display (car (car list-t2)))
(newline)
(newline)
(newline)


