        -:    0:Source:get_fibonacci_polynomial_by_dynamic_programming_v2.c
        -:    0:Graph:get_fibonacci_polynomial_by_dynamic_programming_v2.gcno
        -:    0:Data:get_fibonacci_polynomial_by_dynamic_programming_v2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/**
        -:    2: * @file get_fibonacci_polynomial_by_dynamic_programming.c
        -:    3: * @brief get the nth member of the fibonacci sequence by dynamic programming.
        -:    4: * using the bottom-up approach.
        -:    5: * the fibonacci sequence index begin from 0th:
        -:    6: * 1, 1, 2, 3, 5, 8, 13, 21, 34....
        -:    7: * @author chenxilinsidney
        -:    8: * @version 1.0
        -:    9: * @date 2014-12-31
        -:   10: */
        -:   11:
        -:   12:#include <stdlib.h>
        -:   13:#include <stdio.h>
        -:   14:// #define NDEBUG
        -:   15:#include <assert.h>
        -:   16:// #define NDBG_PRINT
        -:   17:#include "debug_print.h"
        -:   18:
        -:   19:typedef int TYPE;
        -:   20:
        -:   21:#define NUM  7
        -:   22:
function fib called 1 returned 100% blocks executed 82%
        1:   23:TYPE fib(TYPE index)
        -:   24:{
        1:   25:    assert(index >= 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   26:    TYPE cachs_prevous[2] = {1, 1};
        -:   27:    TYPE cachs_current;
        -:   28:    TYPE i;
        1:   29:    if(index == 0 || index == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   30:        return 1;
        7:   31:    for(i = 2; i <= index; i++) {
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6:   32:        cachs_current = cachs_prevous[0] + cachs_prevous[1];
        6:   33:        cachs_prevous[i & 1] = cachs_current;
        -:   34:    }
        1:   35:    return cachs_current;
        -:   36:}
        -:   37:
function main called 1 returned 100% blocks executed 100%
        1:   38:int main(void)
        -:   39:{
        1:   40:    printf("index = %d\n", NUM);
call    0 returned 100%
        1:   41:    printf("fib = %d\n", fib(NUM));
call    0 returned 100%
call    1 returned 100%
        1:   42:    return EXIT_SUCCESS;
        -:   43:}
