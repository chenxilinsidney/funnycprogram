        -:    0:Source:get_fibonacci_polynomial_by_dynamic_programming.c
        -:    0:Graph:get_fibonacci_polynomial_by_dynamic_programming.gcno
        -:    0:Data:get_fibonacci_polynomial_by_dynamic_programming.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/**
        -:    2: * @file get_fibonacci_polynomial_by_dynamic_programming.c
        -:    3: * @brief get fibonacci polynomial by dynamic programming.
        -:    4: * @author chenxilinsidney
        -:    5: * @version 1.0
        -:    6: * @date 2014-12-31
        -:    7: */
        -:    8:
        -:    9:#include <stdlib.h>
        -:   10:#include <stdio.h>
        -:   11:
        -:   12:// #define NDBG_PRINT
        -:   13:#include "debug_print.h"
        -:   14:
        -:   15:typedef int TYPE;
        -:   16:
        -:   17:#define NUM  4
        -:   18:TYPE cache[NUM] = {0};
        -:   19:
function fib called 7 returned 100% blocks executed 100%
        7:   20:TYPE fib(TYPE index)
        -:   21:{
        7:   22:    DEBUG_PRINT_STRING("In recursion now.\n");
call    0 returned 100%
        7:   23:    DEBUG_PRINT_VALUE("%d", index);
call    0 returned 100%
        -:   24:    static TYPE cache_count = 0;
        7:   25:    if(index < cache_count) {
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        2:   26:        DEBUG_PRINT_STRING("get value from cache.\n");
call    0 returned 100%
        2:   27:        DEBUG_PRINT_VALUE("%d", cache[index]);
call    0 returned 100%
        2:   28:        DEBUG_PRINT_STRING("Out recursion now.\n");
call    0 returned 100%
        2:   29:        return cache[index];
        5:   30:    } else if(index == 0 || index == 1) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        2:   31:        DEBUG_PRINT_STRING("get first index = 0/1.\n");
call    0 returned 100%
        2:   32:        cache[index] = 1;
        2:   33:        cache_count++;
        2:   34:        DEBUG_PRINT_STRING("Out recursion now.\n");
call    0 returned 100%
        2:   35:        return 1;
        -:   36:    } else {
        3:   37:        DEBUG_PRINT_STRING("Will go to new recursion.\n");
call    0 returned 100%
        3:   38:        cache[index] = fib(index - 2) + fib(index - 1);
call    0 returned 100%
call    1 returned 100%
        3:   39:        cache_count++;
        3:   40:        DEBUG_PRINT_STRING("Out recursion now.\n");
call    0 returned 100%
        3:   41:        return cache[index];
        -:   42:    }
        -:   43:}
        -:   44:
function main called 1 returned 100% blocks executed 100%
        1:   45:int main(void)
        -:   46:{
        1:   47:    printf("index = %d\n", NUM);
call    0 returned 100%
        1:   48:    printf("fib = %d\n", fib(NUM));
call    0 returned 100%
call    1 returned 100%
        1:   49:    return EXIT_SUCCESS;
        -:   50:}
